{
    "0": {
      "Title": "1. Two Sum",
      "Content": "Given an array of integers, return indices of the two numbers such that they add up to a specific target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nExample:\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n ",
      "Difficulty": "Easy",
      "Hints": []
    },
    "1": {
      "Title": "2. Add Two Numbers",
      "Content": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\nExample:\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8\nExplanation: 342 + 465 = 807.",
      "Difficulty": "Medium",
      "Hints": []
    },
    "2": {
      "Title": "3. Longest Substring Without Repeating Characters",
      "Content": "Given a string, find the length of the longest substring without repeating characters.\nExample 1:\nInput: \"abcabcbb\"\nOutput: 3 \nExplanation: The answer is \"abc\", with the length of 3. \nExample 2:\nInput: \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\nExample 3:\nInput: \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3. \n             Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.",
      "Difficulty": "Medium",
      "Hints": []
    },
    "3": {
      "Title": "4. Median of Two Sorted Arrays",
      "Content": "There are two sorted arrays nums1 and nums2 of size m and n respectively.\nFind the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\nYou may assume nums1 and nums2 cannot be both empty.\nExample 1:\nnums1 = [1, 3]\nnums2 = [2]\n\nThe median is 2.0\nExample 2:\nnums1 = [1, 2]\nnums2 = [3, 4]\n\nThe median is (2 + 3)/2 = 2.5",
      "Difficulty": "Hard",
      "Hints": []
    },
    "4": {
      "Title": "5. Longest Palindromic Substring",
      "Content": "Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\nExample 1:\nInput: \"babad\"\nOutput: \"bab\"\nNote: \"aba\" is also a valid answer.\nExample 2:\nInput: \"cbbd\"\nOutput: \"bb\"",
      "Difficulty": "Medium",
      "Hints": [
        "Hide Hint 1\nHow can we reuse a previously computed palindrome to compute a larger palindrome?",
        "Hide Hint 2\nIf “aba” is a palindrome, is “xabax” and palindrome? Similarly is “xabay” a palindrome?",
        "Hide Hint 3\nComplexity based hint:\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation."
      ]
    },
    "5": {
      "Title": "6. ZigZag Conversion",
      "Content": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nP   A   H   N\nA P L S I I G\nY   I   R\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\nWrite the code that will take a string and make this conversion given a number of rows:\nstring convert(string s, int numRows);\nExample 1:\nInput: s = \"PAYPALISHIRING\", numRows = 3\nOutput: \"PAHNAPLSIIGYIR\"\nExample 2:\nInput: s = \"PAYPALISHIRING\", numRows = 4\nOutput: \"PINALSIGYAHRPI\"\nExplanation:\n\nP     I    N\nA   L S  I G\nY A   H R\nP     I",
      "Difficulty": "Medium",
      "Hints": []
    },
    "6": {
      "Title": "7. Reverse Integer",
      "Content": "Given a 32-bit signed integer, reverse digits of an integer.\nExample 1:\nInput: 123\nOutput: 321\nExample 2:\nInput: -123\nOutput: -321\nExample 3:\nInput: 120\nOutput: 21\nNote:\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.",
      "Difficulty": "Easy",
      "Hints": []
    },
    "7": {
      "Title": "8. String to Integer (atoi)",
      "Content": "Implement atoi which converts a string to an integer.\nThe function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.\nThe string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.\nIf the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.\nIf no valid conversion could be performed, a zero value is returned.\nNote:\nOnly the space character ' ' is considered as whitespace character.\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. If the numerical value is out of the range of representable values, INT_MAX (231 − 1) or INT_MIN (−231) is returned.\nExample 1:\nInput: \"42\"\nOutput: 42\nExample 2:\nInput: \"   -42\"\nOutput: -42\nExplanation: The first non-whitespace character is '-', which is the minus sign.\n             Then take as many numerical digits as possible, which gets 42.\nExample 3:\nInput: \"4193 with words\"\nOutput: 4193\nExplanation: Conversion stops at digit '3' as the next character is not a numerical digit.\nExample 4:\nInput: \"words and 987\"\nOutput: 0\nExplanation: The first non-whitespace character is 'w', which is not a numerical \n             digit or a +/- sign. Therefore no valid conversion could be performed.\nExample 5:\nInput: \"-91283472332\"\nOutput: -2147483648\nExplanation: The number \"-91283472332\" is out of the range of a 32-bit signed integer.\n             Thefore INT_MIN (−231) is returned.",
      "Difficulty": "Medium",
      "Hints": []
    },
    "8": {
      "Title": "9. Palindrome Number",
      "Content": "Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\nExample 1:\nInput: 121\nOutput: true\nExample 2:\nInput: -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\nExample 3:\nInput: 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\nFollow up:\nCoud you solve it without converting the integer to a string?",
      "Difficulty": "Easy",
      "Hints": [
        "Hide Hint 1\nBeware of overflow when you reverse the integer."
      ]
    },
    "9": {
      "Title": "10. Regular Expression Matching",
      "Content": "Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'.\n'.' Matches any single character.\n'*' Matches zero or more of the preceding element.\nThe matching should cover the entire input string (not partial).\nNote:\ns could be empty and contains only lowercase letters a-z.\np could be empty and contains only lowercase letters a-z, and characters like . or *.\nExample 1:\nInput:\ns = \"aa\"\np = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\nExample 2:\nInput:\ns = \"aa\"\np = \"a*\"\nOutput: true\nExplanation: '*' means zero or more of the precedeng element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\nExample 3:\nInput:\ns = \"ab\"\np = \".*\"\nOutput: true\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\nExample 4:\nInput:\ns = \"aab\"\np = \"c*a*b\"\nOutput: true\nExplanation: c can be repeated 0 times, a can be repeated 1 time. Therefore it matches \"aab\".\nExample 5:\nInput:\ns = \"mississippi\"\np = \"mis*is*p*.\"\nOutput: false",
      "Difficulty": "Hard",
      "Hints": []
    },
    "10": {
      "Title": "11. Container With Most Water",
      "Content": "Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\nNote: You may not slant the container and n is at least 2.\n  The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n  Example:\nInput: [1,8,6,2,5,4,8,3,7]\nOutput: 49",
      "Difficulty": "Medium",
      "Hints": []
    },
    "11": {
      "Title": "12. Integer to Roman",
      "Content": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9. \nX can be placed before L (50) and C (100) to make 40 and 90. \nC can be placed before D (500) and M (1000) to make 400 and 900.\nGiven an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.\nExample 1:\nInput: 3\nOutput: \"III\"\nExample 2:\nInput: 4\nOutput: \"IV\"\nExample 3:\nInput: 9\nOutput: \"IX\"\nExample 4:\nInput: 58\nOutput: \"LVIII\"\nExplanation: L = 50, V = 5, III = 3.\nExample 5:\nInput: 1994\nOutput: \"MCMXCIV\"\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.",
      "Difficulty": "Medium",
      "Hints": []
    },
    "12": {
      "Title": "13. Roman to Integer",
      "Content": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9. \nX can be placed before L (50) and C (100) to make 40 and 90. \nC can be placed before D (500) and M (1000) to make 400 and 900.\nGiven a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.\nExample 1:\nInput: \"III\"\nOutput: 3\nExample 2:\nInput: \"IV\"\nOutput: 4\nExample 3:\nInput: \"IX\"\nOutput: 9\nExample 4:\nInput: \"LVIII\"\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\nExample 5:\nInput: \"MCMXCIV\"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.",
      "Difficulty": "Easy",
      "Hints": [
        "Hide Hint 1\nI - 1\nV - 5\nX - 10\nL - 50\nC - 100\nD - 500\nM - 1000",
        "Hide Hint 2\nRules:\n* If I comes before V or X, subtract 1 eg: IV = 4 and IX = 9\n* If X comes before L or C, subtract 10 eg: XL = 40 and XC = 90\n* If C comes before D or M, subtract 100 eg: CD = 400 and CM = 900"
      ]
    },
    "13": {
      "Title": "14. Longest Common Prefix",
      "Content": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".\nExample 1:\nInput: [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\nExample 2:\nInput: [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\nNote:\nAll given inputs are in lowercase letters a-z.",
      "Difficulty": "Easy",
      "Hints": []
    },
    "14": {
      "Title": "15. 3Sum",
      "Content": "Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\nNote:\nThe solution set must not contain duplicate triplets.\nExample:\nGiven array nums = [-1, 0, 1, 2, -1, -4],\n\nA solution set is:\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]",
      "Difficulty": "Medium",
      "Hints": []
    },
    "15": {
      "Title": "16. 3Sum Closest",
      "Content": "Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\nExample:\nGiven array nums = [-1, 2, 1, -4], and target = 1.\n\nThe sum that is closest to the target is 2. (-1 + 2 + 1 = 2).",
      "Difficulty": "Medium",
      "Hints": []
    },
    "16": {
      "Title": "17. Letter Combinations of a Phone Number",
      "Content": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\nA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\nExample:\nInput: \"23\"\nOutput: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\nNote:\nAlthough the above answer is in lexicographical order, your answer could be in any order you want.",
      "Difficulty": "Medium",
      "Hints": []
    },
    "17": {
      "Title": "18. 4Sum",
      "Content": "Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.\nNote:\nThe solution set must not contain duplicate quadruplets.\nExample:\nGiven array nums = [1, 0, -1, 0, -2, 2], and target = 0.\n\nA solution set is:\n[\n  [-1,  0, 0, 1],\n  [-2, -1, 1, 2],\n  [-2,  0, 0, 2]\n]",
      "Difficulty": "Medium",
      "Hints": []
    },
    "18": {
      "Title": "19. Remove Nth Node From End of List",
      "Content": "Given a linked list, remove the n-th node from the end of list and return its head.\nExample:\nGiven linked list: 1->2->3->4->5, and n = 2.\n\nAfter removing the second node from the end, the linked list becomes 1->2->3->5.\nNote:\nGiven n will always be valid.\nFollow up:\nCould you do this in one pass?",
      "Difficulty": "Medium",
      "Hints": []
    },
    "19": {
      "Title": "20. Valid Parentheses",
      "Content": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nAn input string is valid if:\nOpen brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.\nNote that an empty string is also considered valid.\nExample 1:\nInput: \"()\"\nOutput: true\nExample 2:\nInput: \"()[]{}\"\nOutput: true\nExample 3:\nInput: \"(]\"\nOutput: false\nExample 4:\nInput: \"([)]\"\nOutput: false\nExample 5:\nInput: \"{[]}\"\nOutput: true",
      "Difficulty": "Easy",
      "Hints": [
        "Hide Hint 1\nAn interesting property about a valid parenthesis expression is that a sub-expression of a valid expression should also be a valid expression. (Not every sub-expression) e.g.\n{ { } [ ] [ [ [ ] ] ] } is VALID expression\n          [ [ [ ] ] ]    is VALID sub-expression\n  { } [ ]                is VALID sub-expression\nCan we exploit this recursive structure somehow?",
        "Hide Hint 2\nWhat if whenever we encounter a matching pair of parenthesis in the expression, we simply remove it from the expression? This would keep on shortening the expression. e.g.\n{ { ( { } ) } }\n      |_|\n\n{ { (      ) } }\n    |______|\n\n{ {          } }\n  |__________|\n\n{                }\n|________________|\n\nVALID EXPRESSION!",
        "Hide Hint 3\nThe stack data structure can come in handy here in representing this recursive structure of the problem. We can't really process this from the inside out because we don't have an idea about the overall structure. But, the stack can help us process this recursively i.e. from outside to inwards."
      ]
    },
    "20": {
      "Title": "21. Merge Two Sorted Lists",
      "Content": "Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\nExample:\nInput: 1->2->4, 1->3->4\nOutput: 1->1->2->3->4->4",
      "Difficulty": "Easy",
      "Hints": []
    },
    "21": {
      "Title": "22. Generate Parentheses",
      "Content": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\nFor example, given n = 3, a solution set is:\n[\n  \"((()))\",\n  \"(()())\",\n  \"(())()\",\n  \"()(())\",\n  \"()()()\"\n]",
      "Difficulty": "Medium",
      "Hints": []
    },
    "22": {
      "Title": "23. Merge k Sorted Lists",
      "Content": "Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.\nExample:\nInput:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nOutput: 1->1->2->3->4->4->5->6",
      "Difficulty": "Hard",
      "Hints": []
    },
    "23": {
      "Title": "24. Swap Nodes in Pairs",
      "Content": "Given a linked list, swap every two adjacent nodes and return its head.\nYou may not modify the values in the list's nodes, only nodes itself may be changed.\n  Example:\nGiven 1->2->3->4, you should return the list as 2->1->4->3.",
      "Difficulty": "Medium",
      "Hints": []
    },
    "24": {
      "Title": "25. Reverse Nodes in k-Group",
      "Content": "Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.\nExample:\nGiven this linked list: 1->2->3->4->5\nFor k = 2, you should return: 2->1->4->3->5\nFor k = 3, you should return: 3->2->1->4->5\nNote:\nOnly constant extra memory is allowed.\nYou may not alter the values in the list's nodes, only nodes itself may be changed.",
      "Difficulty": "Hard",
      "Hints": []
    },
    "25": {
      "Title": "26. Remove Duplicates from Sorted Array",
      "Content": "Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\nExample 1:\nGiven nums = [1,1,2],\n\nYour function should return length = 2, with the first two elements of nums being 1 and 2 respectively.\n\nIt doesn't matter what you leave beyond the returned length.\nExample 2:\nGiven nums = [0,0,1,1,1,2,2,3,3,4],\n\nYour function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.\n\nIt doesn't matter what values are set beyond the returned length.\nClarification:\nConfused why the returned value is an integer but your answer is an array?\nNote that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.\nInternally you can think of this:\n// nums is passed in by reference. (i.e., without making a copy)\nint len = removeDuplicates(nums);\n\n// any modification to nums in your function would be known by the caller.\n// using the length returned by your function, it prints the first len elements.\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}",
      "Difficulty": "Easy",
      "Hints": []
    },
    "26": {
      "Title": "27. Remove Element",
      "Content": "Given an array nums and a value val, remove all instances of that value in-place and return the new length.\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\nThe order of elements can be changed. It doesn't matter what you leave beyond the new length.\nExample 1:\nGiven nums = [3,2,2,3], val = 3,\n\nYour function should return length = 2, with the first two elements of nums being 2.\n\nIt doesn't matter what you leave beyond the returned length.\nExample 2:\nGiven nums = [0,1,2,2,3,0,4,2], val = 2,\n\nYour function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.\n\nNote that the order of those five elements can be arbitrary.\n\nIt doesn't matter what values are set beyond the returned length.\nClarification:\nConfused why the returned value is an integer but your answer is an array?\nNote that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.\nInternally you can think of this:\n// nums is passed in by reference. (i.e., without making a copy)\nint len = removeElement(nums, val);\n\n// any modification to nums in your function would be known by the caller.\n// using the length returned by your function, it prints the first len elements.\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}",
      "Difficulty": "Easy",
      "Hints": [
        "Hide Hint 1\nTry two pointers.",
        "Hide Hint 2\nDid you use the property of \"the order of elements can be changed\"?",
        "Hide Hint 3\nWhat happens when the elements to remove are rare?"
      ]
    },
    "27": {
      "Title": "28. Implement strStr()",
      "Content": "Implement strStr().\nReturn the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\nExample 1:\nInput: haystack = \"hello\", needle = \"ll\"\nOutput: 2\nExample 2:\nInput: haystack = \"aaaaa\", needle = \"bba\"\nOutput: -1\nClarification:\nWhat should we return when needle is an empty string? This is a great question to ask during an interview.\nFor the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().",
      "Difficulty": "Easy",
      "Hints": []
    },
    "28": {
      "Title": "29. Divide Two Integers",
      "Content": "Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.\nReturn the quotient after dividing dividend by divisor.\nThe integer division should truncate toward zero.\nExample 1:\nInput: dividend = 10, divisor = 3\nOutput: 3\nExample 2:\nInput: dividend = 7, divisor = -3\nOutput: -2\nNote:\nBoth dividend and divisor will be 32-bit signed integers.\nThe divisor will never be 0.\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 231 − 1 when the division result overflows.",
      "Difficulty": "Medium",
      "Hints": []
    },
    "29": {
      "Title": "30. Substring with Concatenation of All Words",
      "Content": "You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.\nExample 1:\nInput:\n  s = \"barfoothefoobarman\",\n  words = [\"foo\",\"bar\"]\nOutput: [0,9]\nExplanation: Substrings starting at index 0 and 9 are \"barfoor\" and \"foobar\" respectively.\nThe output order does not matter, returning [9,0] is fine too.\nExample 2:\nInput:\n  s = \"wordgoodgoodgoodbestword\",\n  words = [\"word\",\"good\",\"best\",\"word\"]\nOutput: []",
      "Difficulty": "Hard",
      "Hints": []
    },
    "30": {
      "Title": "31. Next Permutation",
      "Content": "Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\nIf such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).\nThe replacement must be in-place and use only constant extra memory.\nHere are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.\n1,2,3 → 1,3,2\n3,2,1 → 1,2,3\n1,1,5 → 1,5,1",
      "Difficulty": "Medium",
      "Hints": []
    },
    "31": {
      "Title": "32. Longest Valid Parentheses",
      "Content": "Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.\nExample 1:\nInput: \"(()\"\nOutput: 2\nExplanation: The longest valid parentheses substring is \"()\"\nExample 2:\nInput: \")()())\"\nOutput: 4\nExplanation: The longest valid parentheses substring is \"()()\"",
      "Difficulty": "Hard",
      "Hints": []
    },
    "32": {
      "Title": "33. Search in Rotated Sorted Array",
      "Content": "Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).\nYou are given a target value to search. If found in the array return its index, otherwise return -1.\nYou may assume no duplicate exists in the array.\nYour algorithm's runtime complexity must be in the order of O(log n).\nExample 1:\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\nExample 2:\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1",
      "Difficulty": "Medium",
      "Hints": []
    },
    "33": {
      "Title": "34. Find First and Last Position of Element in Sorted Array",
      "Content": "Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\nYour algorithm's runtime complexity must be in the order of O(log n).\nIf the target is not found in the array, return [-1, -1].\nExample 1:\nInput: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\nExample 2:\nInput: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]",
      "Difficulty": "Medium",
      "Hints": []
    },
    "34": {
      "Title": "35. Search Insert Position",
      "Content": "Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\nYou may assume no duplicates in the array.\nExample 1:\nInput: [1,3,5,6], 5\nOutput: 2\nExample 2:\nInput: [1,3,5,6], 2\nOutput: 1\nExample 3:\nInput: [1,3,5,6], 7\nOutput: 4\nExample 4:\nInput: [1,3,5,6], 0\nOutput: 0",
      "Difficulty": "Easy",
      "Hints": []
    },
    "35": {
      "Title": "36. Valid Sudoku",
      "Content": "Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\nEach row must contain the digits 1-9 without repetition.\nEach column must contain the digits 1-9 without repetition.\nEach of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n\nA partially filled sudoku which is valid.\nThe Sudoku board could be partially filled, where empty cells are filled with the character '.'.\nExample 1:\nInput:\n[\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]\nOutput: true\nExample 2:\nInput:\n[\n  [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]\nOutput: false\nExplanation: Same as Example 1, except with the 5 in the top left corner being \n    modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\nNote:\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.\nOnly the filled cells need to be validated according to the mentioned rules.\nThe given board contain only digits 1-9 and the character '.'.\nThe given board size is always 9x9.",
      "Difficulty": "Medium",
      "Hints": []
    },
    "36": {
      "Title": "37. Sudoku Solver",
      "Content": "Write a program to solve a Sudoku puzzle by filling the empty cells.\nA sudoku solution must satisfy all of the following rules:\nEach of the digits 1-9 must occur exactly once in each row.\nEach of the digits 1-9 must occur exactly once in each column.\nEach of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\nEmpty cells are indicated by the character '.'.\n\nA sudoku puzzle...\n\n...and its solution numbers marked in red.\nNote:\nThe given board contain only digits 1-9 and the character '.'.\nYou may assume that the given Sudoku puzzle will have a single unique solution.\nThe given board size is always 9x9.",
      "Difficulty": "Hard",
      "Hints": []
    },
    "37": {
      "Title": "38. Count and Say",
      "Content": "The count-and-say sequence is the sequence of integers with the first five terms as following:\n1.     1\n2.     11\n3.     21\n4.     1211\n5.     111221\n1 is read off as \"one 1\" or 11.\n11 is read off as \"two 1s\" or 21.\n21 is read off as \"one 2, then one 1\" or 1211.\nGiven an integer n where 1 ≤ n ≤ 30, generate the nth term of the count-and-say sequence.\nNote: Each term of the sequence of integers will be represented as a string.\n  Example 1:\nInput: 1\nOutput: \"1\"\nExample 2:\nInput: 4\nOutput: \"1211\"",
      "Difficulty": "Easy",
      "Hints": [
        "Hide Hint 1\nThe following are the terms from n=1 to n=10 of the count-and-say sequence:\n 1.     1\n 2.     11\n 3.     21\n 4.     1211\n 5.     111221 \n 6.     312211\n 7.     13112221\n 8.     1113213211\n 9.     31131211131221\n10.     13211311123113112211",
        "Hide Hint 2\nTo generate the nth term, just count and say the n-1th term."
      ]
    },
    "38": {
      "Title": "39. Combination Sum",
      "Content": "Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.\nThe same repeated number may be chosen from candidates unlimited number of times.\nNote:\nAll numbers (including target) will be positive integers.\nThe solution set must not contain duplicate combinations.\nExample 1:\nInput: candidates = [2,3,6,7], target = 7,\nA solution set is:\n[\n  [7],\n  [2,2,3]\n]\nExample 2:\nInput: candidates = [2,3,5], target = 8,\nA solution set is:\n[\n  [2,2,2,2],\n  [2,3,3],\n  [3,5]\n]",
      "Difficulty": "Medium",
      "Hints": []
    },
    "39": {
      "Title": "40. Combination Sum II",
      "Content": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.\nEach number in candidates may only be used once in the combination.\nNote:\nAll numbers (including target) will be positive integers.\nThe solution set must not contain duplicate combinations.\nExample 1:\nInput: candidates = [10,1,2,7,6,1,5], target = 8,\nA solution set is:\n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\nExample 2:\nInput: candidates = [2,5,2,1,2], target = 5,\nA solution set is:\n[\n  [1,2,2],\n  [5]\n]",
      "Difficulty": "Medium",
      "Hints": []
    },
    "40": {
      "Title": "41. First Missing Positive",
      "Content": "Given an unsorted integer array, find the smallest missing positive integer.\nExample 1:\nInput: [1,2,0]\nOutput: 3\nExample 2:\nInput: [3,4,-1,1]\nOutput: 2\nExample 3:\nInput: [7,8,9,11,12]\nOutput: 1\nNote:\nYour algorithm should run in O(n) time and uses constant extra space.",
      "Difficulty": "Hard",
      "Hints": [
        "Hide Hint 1\nThink about how you would solve the problem in non-constant space. Can you apply that logic to the existing space?",
        "Hide Hint 2\nWe don't care about duplicates or non-positive integers",
        "Hide Hint 3\nRemember that O(2n) = O(n)"
      ]
    },
    "41": {
      "Title": "42. Trapping Rain Water",
      "Content": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.\n\nThe above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!\nExample:\nInput: [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6",
      "Difficulty": "Hard",
      "Hints": []
    },
    "42": {
      "Title": "43. Multiply Strings",
      "Content": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\nExample 1:\nInput: num1 = \"2\", num2 = \"3\"\nOutput: \"6\"\nExample 2:\nInput: num1 = \"123\", num2 = \"456\"\nOutput: \"56088\"\nNote:\nThe length of both num1 and num2 is < 110.\nBoth num1 and num2 contain only digits 0-9.\nBoth num1 and num2 do not contain any leading zero, except the number 0 itself.\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.",
      "Difficulty": "Medium",
      "Hints": []
    },
    "43": {
      "Title": "44. Wildcard Matching",
      "Content": "Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*'.\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\nThe matching should cover the entire input string (not partial).\nNote:\ns could be empty and contains only lowercase letters a-z.\np could be empty and contains only lowercase letters a-z, and characters like ? or *.\nExample 1:\nInput:\ns = \"aa\"\np = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\nExample 2:\nInput:\ns = \"aa\"\np = \"*\"\nOutput: true\nExplanation: '*' matches any sequence.\nExample 3:\nInput:\ns = \"cb\"\np = \"?a\"\nOutput: false\nExplanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\nExample 4:\nInput:\ns = \"adceb\"\np = \"*a*b\"\nOutput: true\nExplanation: The first '*' matches the empty sequence, while the second '*' matches the substring \"dce\".\nExample 5:\nInput:\ns = \"acdcb\"\np = \"a*c?b\"\nOutput: false",
      "Difficulty": "Hard",
      "Hints": []
    },
    "44": {
      "Title": "45. Jump Game II",
      "Content": "Given an array of non-negative integers, you are initially positioned at the first index of the array.\nEach element in the array represents your maximum jump length at that position.\nYour goal is to reach the last index in the minimum number of jumps.\nExample:\nInput: [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2.\n    Jump 1 step from index 0 to 1, then 3 steps to the last index.\nNote:\nYou can assume that you can always reach the last index.",
      "Difficulty": "Hard",
      "Hints": []
    },
    "45": {
      "Title": "46. Permutations",
      "Content": "Given a collection of distinct integers, return all possible permutations.\nExample:\nInput: [1,2,3]\nOutput:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]",
      "Difficulty": "Medium",
      "Hints": []
    },
    "46": {
      "Title": "47. Permutations II",
      "Content": "Given a collection of numbers that might contain duplicates, return all possible unique permutations.\nExample:\nInput: [1,1,2]\nOutput:\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]",
      "Difficulty": "Medium",
      "Hints": []
    },
    "47": {
      "Title": "48. Rotate Image",
      "Content": "You are given an n x n 2D matrix representing an image.\nRotate the image by 90 degrees (clockwise).\nNote:\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\nExample 1:\nGiven input matrix = \n[\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n],\n\nrotate the input matrix in-place such that it becomes:\n[\n  [7,4,1],\n  [8,5,2],\n  [9,6,3]\n]\nExample 2:\nGiven input matrix =\n[\n  [ 5, 1, 9,11],\n  [ 2, 4, 8,10],\n  [13, 3, 6, 7],\n  [15,14,12,16]\n], \n\nrotate the input matrix in-place such that it becomes:\n[\n  [15,13, 2, 5],\n  [14, 3, 4, 1],\n  [12, 6, 8, 9],\n  [16, 7,10,11]\n]",
      "Difficulty": "Medium",
      "Hints": []
    },
    "48": {
      "Title": "49. Group Anagrams",
      "Content": "Given an array of strings, group anagrams together.\nExample:\nInput: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"],\nOutput:\n[\n  [\"ate\",\"eat\",\"tea\"],\n  [\"nat\",\"tan\"],\n  [\"bat\"]\n]\nNote:\nAll inputs will be in lowercase.\nThe order of your output does not matter.",
      "Difficulty": "Medium",
      "Hints": []
    },
    "49": {
      "Title": "50. Pow(x, n)",
      "Content": "Implement pow(x, n), which calculates x raised to the power n (xn).\nExample 1:\nInput: 2.00000, 10\nOutput: 1024.00000\nExample 2:\nInput: 2.10000, 3\nOutput: 9.26100\nExample 3:\nInput: 2.00000, -2\nOutput: 0.25000\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\nNote:\n-100.0 < x < 100.0\nn is a 32-bit signed integer, within the range [−231, 231 − 1]",
      "Difficulty": "Medium",
      "Hints": []
    }
  }